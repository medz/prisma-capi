// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class PrismaBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PrismaBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PrismaBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Format a schema.
  ///
  /// ## Arguments
  ///
  /// - `schema` - The schema to format.
  /// - `params` - The formatting parameters as a JSON string.
  ffi.Pointer<ffi.Char> prisma_schema_format(
    ffi.Pointer<ffi.Char> schema,
    ffi.Pointer<ffi.Char> params,
  ) {
    return _prisma_schema_format(
      schema,
      params,
    );
  }

  late final _prisma_schema_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('prisma_schema_format');
  late final _prisma_schema_format = _prisma_schema_formatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Returns the version of the Prisma library.
  ffi.Pointer<ffi.Char> prisma_version() {
    return _prisma_version();
  }

  late final _prisma_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'prisma_version');
  late final _prisma_version =
      _prisma_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();
}
