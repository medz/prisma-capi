// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class PrismaBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PrismaBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PrismaBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Returns the semantic version of the library.
  ffi.Pointer<ffi.Char> get_prisma_semantic_version() {
    return _get_prisma_semantic_version();
  }

  late final _get_prisma_semantic_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'get_prisma_semantic_version');
  late final _get_prisma_semantic_version = _get_prisma_semantic_versionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// Returns the git commit hash of the library.
  ffi.Pointer<ffi.Char> get_prisma_git_commit_hash() {
    return _get_prisma_git_commit_hash();
  }

  late final _get_prisma_git_commit_hashPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'get_prisma_git_commit_hash');
  late final _get_prisma_git_commit_hash = _get_prisma_git_commit_hashPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();
}
