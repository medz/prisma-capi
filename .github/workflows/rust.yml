name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Run tests
        run: cargo test --verbose

  build-c-header:
    name: Build C header file
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Install cbindgen
        run: cargo install cbindgen
      - name: Build C header file
        run: cbindgen --config cbindgen.toml --output api.h
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: api.h

  build-dynamic-library:
    needs: [test]
    name: Build Dynamic Library
    strategy:
      matrix:
        include:
          - os: macos-latest
            artifact_name: macos-x86_64.dylib
            rustup_target: x86_64-apple-darwin
          - os: macos-latest
            artifact_name: macos-silicon.dylib
            rustup_target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Rust
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.rustup_target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup Rust target
        run: rustup target add ${{ matrix.rustup_target }}

      - name: Build Dynamic Library
        run: cargo build --release --target ${{ matrix.rustup_target }} --verbose

      - name: Delete old artifact
        run: rm -f ${{ matrix.artifact_name }}

      - if: matrix.os == 'windows-latest'
        name: Copy Windows DLL
        run: cp target/${{ matrix.rustup_target }}/release/prisma_query_engine_c_api.dll ${{ matrix.artifact_name }}

      - if: matrix.os != 'windows-latest'
        name: Copy Dynamic Library
        run: cp target/${{ matrix.rustup_target }}/release/libprisma_query_engine_c_api.dylib ${{ matrix.artifact_name }}

      - name: Upload Dynamic Library artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ${{ matrix.artifact_name }}

  deploy:
    name: Deploy Dynamic Library
    needs: 
      - build-c-header
      - build-dynamic-library
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: artifacts
      - name: Upload artifacts to GitHub release
        uses: softprops/action-gh-release@v1
        working-directory: artifacts
        with:
          files: |
            *.h
            *.dll
            *.dylib
          tag_name: v0.1.0 
