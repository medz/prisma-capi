name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-dynamic-library:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            artifact_name: ios-amd64.a
            local_filename: libprisma_query_engine_c_api.a
            rustup_target: aarch64-apple-ios
          - os: macos-latest
            artifact_name: ios-x86_64.a
            local_filename: libprisma_query_engine_c_api.a
            rustup_target: x86_64-apple-ios
          - os: macos-latest
            artifact_name: android-arm64.so
            local_filename: libprisma_query_engine_c_api.so
            rustup_target: aarch64-linux-android
          - os: macos-latest
            artifact_name: android-armv7.so
            local_filename: libprisma_query_engine_c_api.so
            rustup_target: armv7-linux-androideabi
          - os: macos-latest
            artifact_name: android-i686.so
            local_filename: libprisma_query_engine_c_api.so
            rustup_target: i686-linux-android
          - os: macos-latest
            artifact_name: android-x86_64.so
            local_filename: libprisma_query_engine_c_api.so
            rustup_target: x86_64-linux-android
          - os: ubuntu-latest
            artifact_name: linux-x86_64.so
            local_filename: libprisma_query_engine_c_api.so
            rustup_target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            artifact_name: linux-aarch64.so
            local_filename: libprisma_query_engine_c_api.so
            rustup_target: aarch64-unknown-linux-gnu
          # - os: windows-latest
          #   artifact_name: windows-x86_64-msvc.dll
          #   rustup_target: x86_64-pc-windows-msvc
          # - os: windows-latest
          #   artifact_name: windows-aarch64-msvc.dll
          #   rustup_target: aarch64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.rustup_target }}-${{ hashFiles('**/Cargo.lock') }}

      # - if: matrix.os == 'windows-latest'
      #   name: Install Windows rust toolchain
      #   run: rustup toolchain install stable-msvc

      # If artifact_name prefix is `android`, then set COMPILER_DIR environment variable
      - if: ${{ startsWith(matrix.artifact_name, 'android') }}
        name: Set NDK and COMPILER_DIR environment variables
        run: |
          export NDK=${{ env.ANDROID_NDK_HOME }}
          export COMPILER_DIR=${{ env.ANDROID_NDK_HOME }}/toolchains/llvm/darwin-x86_64/bin
          export PATH=$PATH:$COMPILER_DIR

      # If artifact_name prefix is `android`, then set cargo target environment variables
      - if: ${{ startsWith(matrix.artifact_name, 'android') }}
        name: Set cargo target environment variables
        run: |
          export CC_i686_linux_android: ${{ env.COMPILER_DIR }}/i686-linux-android21-clang
          export AR_i686_linux_android: ${{ env.COMPILER_DIR }}/llvm-ar
          export CARGO_TARGET_I686_LINUX_ANDROID_LINKER: ${{ env.COMPILER_DIR }}/i686-linux-android21-clang
          export CARGO_TARGET_I686_LINUX_ANDROID_AR: ${{ env.COMPILER_DIR }}/llvm-ar
          echo ###############################################################
          export CC_x86_64_linux_android: ${{ env.COMPILER_DIR }}/x86_64-linux-android21-clang
          export AR_x86_64_linux_android: ${{ env.COMPILER_DIR }}/llvm-ar
          export CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER: ${{ env.COMPILER_DIR }}/x86_64-linux-android21-clang
          export CARGO_TARGET_X86_64_LINUX_ANDROID_AR: ${{ env.COMPILER_DIR }}/llvm-ar
          echo ###############################################################
          export CC_armv7_linux_androideabi: ${{ env.COMPILER_DIR }}/armv7a-linux-androideabi21-clang
          export AR_armv7_linux_androideabi: ${{ env.COMPILER_DIR }}/llvm-ar
          export CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER: ${{ env.COMPILER_DIR }}/armv7a-linux-androideabi21-clang
          export CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_AR: ${{ env.COMPILER_DIR }}/llvm-ar
          echo ###############################################################
          export CC_aarch64_linux_android: ${{ env.COMPILER_DIR }}/aarch64-linux-android21-clang
          export AR_aarch64_linux_android: ${{ env.COMPILER_DIR }}/llvm-ar
          export CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER: ${{ env.COMPILER_DIR }}/aarch64-linux-android21-clang
          export CARGO_TARGET_AARCH64_LINUX_ANDROID_AR: ${{ env.COMPILER_DIR }}/llvm-ar

      - name: Setup Rust target
        run: rustup target add ${{ matrix.rustup_target }}

      - name: Build Dynamic Library
        run: cargo build --release --target ${{ matrix.rustup_target }} --verbose

      - name: Delete old artifact
        run: |
          rm -f ${{ matrix.artifact_name }}
          ls target/${{ matrix.rustup_target }}/release

      # - if: matrix.os == 'windows-latest'
      #   name: Copy Windows DLL
      #   run: cp target/${{ matrix.rustup_target }}/release/prisma_query_engine_c_api.dll ${{ matrix.artifact_name }}
      - name: Copy Dynamic Library
        run: cp target/${{ matrix.rustup_target }}/release/${{ matrix.local_filename }} ${{ matrix.artifact_name }}

      - name: Upload Dynamic Library artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ${{ matrix.artifact_name }}

  deploy:
    name: Deploy
    needs: 
      - build-c-header
      - build-dynamic-library
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
      - name: Upload artifacts to GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.h
            *.a
            *.dll
            *.dylib
            *.so
          tag_name: v0.1.0 
